::root {
  --popup-z-index: 3;
  --layout-sticky-z-index: 2;
  --internal-sticky-z-index: 1;
}

html,
body {
  font-family: sans-serif;
  font-size: 16px;
  margin: 0;
  padding: 0;
}


html {
  /*
    Цвета в CSS
      - transparent — отсутствие цвета
      - название цвета — https://developer.mozilla.org/en-US/docs/Web/CSS/named-color
      - HEX-код через решетку
        - Три компоненты цвета: Red, Green, Blue
        - Каждая компонента цвета имеет значение от 0 до 255
          - R красный 0.255  0..FF
          - G зеленый 0.255  0..FF
          - B синий 0.255    0..FF
        - Каждый цвет записывается в шестнадцатеричной системе счисления
          - двоичная 0, 1 => 0, 1, 10, 11, 100, 101, 110, 111
          - десятеричная система 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
          - шестнадцатеричная система (Hexadecimal) 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F, 10, 11, 12, 13, 14, 15 .. 1F, 20, 21, 22
      - Запись в системе RGB
      - Запись в системе RGBA(Alpha) 0..1
      - HSL — Hue, Saturation, Lightness
  */
  background-color: #eee;
}

body {
  background-color: white;
  /*
    смещение по x
    смещение по y
    размытие
    цвет
  */
  box-shadow: 0px 0px 10px 10px rgba(0, 0, 0, 0.1);
  border-radius: 20px;
  margin: 20px;
  padding: 20px;
}

#example-container {
  border: solid 1px red;
  padding: 10px;
}

#example-container-2 {
  border: solid 1px blue;
  top: 100px;
  left: 100px;
  position: relative;
}

.page-header {
  background: #fff;
  box-sizing: border-box;
  position: sticky;
  top: 0;
  left: 0;
  padding: 10px 0 20px;
  z-index: var(--layout-sticky-z-index);
}

/*
  Любые позиционирования кроме static дают возможность задавать элементу
  координаты расположения

  Координаты в вебе всегда задаются относительно верхнего левого угла
    - x: 10px - всегда растет вправо
    - y: 10px - всегда растет вниз
    - top, left - задаются относительно левого верхнего угла
    - bottom, right - задаются относительно правого нижнего угла

  Задает поведение элемента в потоке страницы 
  - Значение по умолчанию: static
  - static - стандартное поведение в потоке: занимает всю ширину, 
      если блочный, встраивается в ряд с другими элементами если 
      инлайновый
  - relative
    - дает возможность задавать элементу координаты относительно 
      своего исходного положения в потоке
    - при изменении координат, элемент продолжает 
      оставаться в своем потоке и влиять на положение соседних
      элементов, но виртуально смещается визуально
    - координаты задаются относительно исходных координат 
      в потоке
  - absolute
    - выбивает элемент из потока — элемент перестает влиять
      на положение соседних элементов
    - исходное положение элемента — то же самое, что было
      бы в обычном потоке (справедливо для верхнего левого
      угла)
    - координаты задаются относительно ближайшего родителя 
      c position:relative или position:absolute 
      с учетом его смещения или от страницы целиком
    - Правила top, left, bottom и right могут работать одновременно
      если блоку не задана явно ширина или высота. Если одновременно 
      задать top и bottom, то элемент изменит свою
      высоту. А если задать left и right — ширину. Если ширина
      задана явно, у top приоритет над bottom, а у left — над right.
    - При выбивании из потока блочного элемента, его свойство 
      автоматически растягиваться на всю ширину контейнера
      исчезает и его автоматическая ширина подстраивается
      под его содержимое
  - fixed
    - работает (почти) так же как absolute
    - координаты элемента задаются не относительно потока,
      а относительно вьюпорта
    - на положение элемента с position: fixed не влияют
      родительские элементы, они могут быть relative, absolute,
      но координаты будут всегда задаваться относительно вьюпорта
  - sticky
    - микс между position: static и position: fixed. Когда
      элемент находится во вьюпорте, он ведет себя как static
      включая влияние на поток, когда он исчезает из вьюпорта
      он начинает вести себя как position: fixed.
    - координаты (top, left, right, bottom) задаются для
      состояния элемента, когда он ведет себя как position: fixed
    - в состоянии, когда элемент становится sticky, он продолжает
      влиять на поток вокруг себя и сохраняет свои исходные свойства
      (например, если он был блочным, его ширина не изменится)
    - для position: sticky не работает bottom
    - если элемент исходно находится вне вьюпорта, он закрепится 
      не сразу, а только когда мы его проскроллим
    - если на странице есть несколько sticky элементов, они 
      прилипнут все на той высоте, которая для них прописана
*/
.dialog {
  background: #fff;
  border: solid 1px #ccc;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
  padding: 10px;
  position: fixed;

  top: 10px;
  right: 20px;

  margin-top: 30px;

  width: 300px;
  z-index: var(--popup-z-index);
}

.dialog-close {
  position: absolute;
  top: 10px;
  right: 10px;
}

.text-example {
  border: solid 1px #ccc;
  margin: 20px;
  padding: 10px;
  overflow: auto;
}

.text-example-block {
  /* 
    Float (плавать, держаться на воде) — свойство задает 
    параметры обтекания элемента текстом
      - при применении float перестает работать автоматическая ширина
        для блоков
      - блок с заданным float начинает "оплывать" инлайновые или 
        inline-block элементы с заданной стороны
      - ширина блока влияет на элементы расположенные рядом с ним
        в потоке, а высота (по умолчанию) — нет
  */
  float: left;
  width: 100px;
  height: 100px;
  border: solid 1px red;
  margin: 10px;
}

#adv {
  background-image:
    linear-gradient(217deg, rgba(255, 0, 0, .8), rgba(255, 0, 0, 0) 70.71%),
    linear-gradient(127deg, rgba(0, 255, 0, .8), rgba(0, 255, 0, 0) 70.71%),
    linear-gradient(336deg, rgba(0, 0, 255, .8), rgba(0, 0, 255, 0) 70.71%),
    url("./media/pumpkins-medium.jpg");

  /*
    - x
    - y
    - Можно использовать: 
      - ключевые слова (два разных центра — по горизонтали — center, по вертикали — middle)
      - проценты
      - абсолютные значения
   */
  box-sizing: border-box;
  border-radius: 10px;

  color: #fff;
  height: 10em;
  width: 100%;
  padding: 30px;
  margin-bottom: 20px;
}

.content-wrapper {
  display: flex;
  align-items: flex-start;
}

.content-main {
  flex-grow: 1;
}

.content-main-title {
  color: salmon;
  font-family: sans-serif;
  font-size: 200%;
}

.content-sidebar {
  flex-grow: 0;
  flex-shrink: 0;
  flex-basis: 300px;
}

.flex-example {
  align-content: flex-start;
  align-items: flex-start;
  border: solid #ccc;
  border-width: 1px 0;
  gap: 10px 20px;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: flex-start;
  height: 1000px;
  width: 300px;
}

.flex-item {
  background: yellow;
  border: solid 10px red;
  padding: 10px;
  transform-origin: 50% 50%;

  transition: transform 200ms ease-out 50ms;
  transform: scale(1);


  /*
    - transition: width 200ms;
    - width: 100px;
    - width: 200px;

    - +100px

    - FPS: 60
    - 1000/60
    - 1 frame: 16ms
    - 12 frames

    - 8.33px
    - 100px
    - 108.3px
    - 116.6px
    - ...
  */

  /* transform: scale(1); */

  /* 
    transition: property duration timing-function delay; 
      transition-property
      transition-duration
      transition-delay
  */
}

.flex-item:hover {
  /* transform: scale(1.3); */
  border-color: yellow;
  transform: scale(1.8);
}

#transformed-element {
  box-shadow: 0 0 20px rgba(255, 128, 0, 0.7);
  transform: skewX(10deg);
}

*/ .nav-item {
  font-style: italic;
}